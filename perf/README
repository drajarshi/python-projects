Prerequisites:
Refer prerequisites.txt in the same directory.

Version 0.56:
Added -b option to specify a bandwidth/ throughput limit. E.g.
{
"-e":5,
"-c":"10.245.128.4",
"-i":10,
"-t":60,
"-P":[[5],[20,50]],
"-p":"Current",
"-b":"600M",
"gateway_id":"0737-45dc76cb-eadf-489e-853d-287554d7948c",
"gateway_connection_id":"0737-f38e023b-b619-4abf-b058-8c575feff346",
"peer_gateway_id":"0737-ea7b099a-5626-42f2-b817-54b39f0a621f",
"peer_gateway_connection_id":"0737-1dacfd56-e5b4-4821-a2d9-20931fefc7f1"
}

The above configuration sets a 600 MB limit on the throughput while running iperf3.
The -b option can be specified on the command line as well alongwith other options.

Version 0.55:
Modifications to the -P option have been included in this version. Previously, a user can
specify -P in the configuration file as:
-P: [1,10]
This allows running at stream counts in the specified range split by the default interval
which is 5.
So, -P 1 and -P 6 would be lined up to run. 
Alternately, specifying 
-P: 5 
would run at stream count of 5.
In other words, it was possible to either run with a single count or a range of stream counts.
The latest changes allow single and range based stream counts to be mixed.
E.g.
{
"-e":5,
"-c":"10.245.128.4",
"-i":10,
"-t":60,
"-P":[[5],[20,50]]
}

This configuration would line up runs at -P 5, -P 20, -P 25... upto -P 50.
On the command line, the above can be specified as:
-e 5 -c 10.245.128.4 -i 10 -t 60 -P [5] [20,50]

Version 0.5:
The modified version allows running the test for both VPN as well as other (non-VPN) scenarios.
In order to run for other scenarios,
specify the input config file as:
{
"-e":5,
"-c":"10.245.128.4",
"-i":10,
"-t":60,
"-P":[50]
}

Alternately, if the options need to be specified on the command line, then, the sequence to
run a non-VPN scenario looks like this:
# python3 iperf3_test.py
Enter a space separated list of options for the iperf3 command

-e 5 -c 10.245.128.4 -i 10 -t 60 -P 50
Enter the purpose of using the iperf3 command: Options:VPN/Other
Other

the normal sequence of steps follows.
....
......

To run a VPN Scenario by specifying options on the command line, the sequence looks like this:
# python3 iperf3_test.py
Enter a space separated list of options for the iperf3 command

-e 5 -c 10.245.128.4 -i 10 -t 60 -P 50
Enter the purpose of using the iperf3 command: Options:VPN/Other
VPN
Enter the VPN gateway and gateway connection ids separated by a space
1234-56accdea-aeff-4321-6789-9876678954467112c 4321-abdc11234-ase1-0122-122a-aedd2dd1ee2f
Enter the peer VPN gateway and gateway connection ids separated by a space
1234-56accdea-aeff-4321-6789-9876678954467112c 4321-abdc11234-ase1-0122-122a-aedd2dd1eq23
the normal sequence of steps follows.
....
......


Version 0.4.1:
Corrected form of input config file:
{
"-e":1,
"-c":"10.242.128.4",
"-i":2,
"-t":10,
"-p":"All",
"-P":[1,10],
"gateway_id":"0737-45dc76cb-eadf-489e-853d-287554d7948c",
"gateway_connection_id":"0737-f38e023b-b619-4abf-b058-8c575feff346",
"peer_gateway_id":"0737-ea7b099a-5626-42f2-b817-54b39f0a621f",
"peer_gateway_connection_id":"0737-1dacfd56-e5b4-4821-a2d9-20931fefc7f1"
}

Note that the peer gateway information has also been added and needs to be specified. So, each IKE-IPSec policy
combination is set both on the connection of the gateway as well as the peer gateway.


Version 0.4:
It is possible to now specify a config file as input to the iperf3_test.py,e.g.
{
'-e':1,
'-c':'10.242.128.7',
'-i':2,
'-t':10,
'-p':'All',
'-P':[1,10],
'gateway_id':'1234-56accdea-aeff-4321-6789-9876678954467112c',
'gateway_connection_id':'4321-abdc11234-ase1-0122-122a-aedd2dd1ee2f'
}

e.g.
# python3 iperf3_test.py input_file.config

where input_file.config may contain the information as in the above example.
If the 3rd parameter (the config/ input file) is skipped, then, the script expects inputs on the command line (as before).

Using the input file option allows the script to be run in the background as well as detached from the shell (nohup).

Version 0.3:
-p is available with an additional option. "Current_IKE" is the new option added.
So, one among "All","Pair","Current_IKE" or "Current" may be specified as the argument to -p.
Specifying "Current_IKE" results in running all the set IPSec policies (except Auto) against the current IKE policy.

Added a new option -s. This sets the sleep time in seconds between consecutive runs. It defaults to 10 seconds. If not specified,
a default of 10 seconds is applied.

Version 0.2:
-p is available as an additional option.
This is used to select one of three: "All", "Pair" or "Current"
"All": Run all IPSec policies against each of the IKE policies. 
"Pair": Pick one policy each from the list of IKE and IPSec policies, and run that combination. Once
complete, pick the second policy from each and continue, until all policies are exhausted. This assumes
that the number of IKE and IPSec policies configured is the same.
"Current": Run ONLY the currently set policy and exit.

Also, ensure that the IKE and IPSec policy for both VPN connections are set to Auto and then run the
-p All or -p Pair options.

so, the options can be specified as:
-e 1 -p All -c 10.4.5.10 -i 2 -t 10 -P 2

Not providing the -p option defaults to -p Current.
Also, the -p All option currently runs the Auto/Auto for IKE/IPSec, followed by all IPSec policies against the Auto IKE policy. Subsequently, it runs all combinations of the policies that have been created. The Auto policy specific runs are more of a workaround for now until the Auto IKE and IPSec policies can be explicitly set using the ibmcloud CLI.

Version 0.1:
Execution:
Identify the IP addresses of the source and destination using the ifconfig command.
Ensure that the IP address of the destination is reachable from the source through a ping command.

Sanity test using ping:
E.g. assume source IP address as 10.3.4.2 and destination IP address as 10.4.5.10.
On 10.3.4.2:

# ping 10.4.5.10
PING 10.4.5.10 (10.4.5.10) 56(84) bytes of data.
64 bytes from 10.4.5.10: icmp_seq=1 ttl=61 time=2.88 ms
64 bytes from 10.4.5.10: icmp_seq=2 ttl=61 time=2.05 ms

If a ping works as above, now ensure that the source and destination can communicate using iperf3. 
The iperf3 server listens on the well-known port 5201. Therefore, the destination should be enabled to allow incoming traffic on port 5201.
Once this is done, do a sanity test using iperf3:

On 10.4.5.10 (destination):
# iperf3 -s
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------

On 10.3.4.2 (source):
# iperf3 -c 10.4.5.10
Connecting to host 10.4.5.10, port 5201
[  4] local 10.3.4.2 port 46102 connected to 10.4.5.10 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd
[  4]   0.00-1.00   sec  62.5 MBytes   524 Mbits/sec   12   1.51 MBytes
[  4]   1.00-2.00   sec  62.5 MBytes   524 Mbits/sec    4   1.51 MBytes
[  4]   2.00-3.00   sec  63.8 MBytes   535 Mbits/sec    0   1.51 MBytes
..........
.............

If an output of the above form is seen on the source (client), a similar output is seen on the destination (server) as well. This implies iperf3 communication is ok.

Now refer to the iperf3 help and identify the set of options to execute.
The options supported by iperf3_test.py script (a subset of options within iperf3):
-t : time in seconds to transmit for
-P : Number of parallel client streams to run
-i : seconds between periodic bandwidth reports
-c : server IP address to connect to

e.g. 
# iperf3 -c 10.4.5.10 -i 2 -t 10 -P 2
Connect to 10.4.5.10 and trasmit for 10 seconds over 2 parallel streams, and show bandwidth reports every 2 seconds.

Once the above is done,
identify the VPN gateway ID and the id of the VPN connection on this gateway to work with.

start the iperf3 server (iperf3 -s) on the destination (if not already running).

On the source, start iperf3_test.py as:
# python3 iperf3_test.py
 space separated list of options for the iperf3 command
-c 10.4.5.10 -i 2 -t 10 -P 2

Additionally, -e can be used to specify a step to use in case of lower and upper bounds of an option.
e.g.
-e 2 -c 10.4.5.10 -i 2 -t 10 -P 2 6
In this case, tests will run for 2,4, and 6 parallel streams (for -P lower bound: 2, upper bound: 6 and step: 2 specified by -e).
connect to 10.4.5.10 and transmit for 10 seconds over 2,4 and 6 parallel streams, and show bandwidth reports every 2 seconds
-e must be specified as the first option in the set of options else, it will be ignored and a default step of 5 will be set.

if -e is not specified, a default step of 5 is assumed.

In order to get the VPN gateway and gateway connection ids, on the source with bx installed,
# bx is vpns

# bx is vpns
Listing vpn gateways under account net 2 as user abc@def.com...
ID                                 Name                Subnet                         Public IP         Resource group            VPN connections                      Created    Status
227f319-ca7-4512-bb5-f4089585   vpn-test-l-2   77724e2e-4b21-4205-8819-e7870a8a1b83   1.15.2.74    ef610b604ba87e2f4585c1   e212-83f-48d-a96-bd1a924   2019-08-2T10:19.211+00:00   available

Enter the VPN gateway and gateway connection ids as seen in the above output, separated by a space

227f319-ca7-4512-bb5-f4089585 e212-83f-48d-a96-bd1a924
...
.....

Once the run completes, a summary_<timestamp>.csv file is generated in the local directory along with one .json file per combination (e.g. IKE/IPSec combination).
The entire run happens within a timestamp specific folder that is created, and at the end of the run, the folder is tarred up as
run_<timestamp>.tar.gz and the run folder is deleted.

