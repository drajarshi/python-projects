v0.3:
run_ng_vpnaas.py now allows additional options.
The modified file now looks like this:
[
{"client":"1.4.9.26",
"server":"1.4.9.25",
"client_config":"input_26_25.config",
"key_filename":"/path/to/ssh/key",
"primary_vpn":"2.3.4.31",
"peer_vpn":"2.4.3.12",
"jumpbox":"3.2.1.41",
"jumpbox_key_filename":"/path/to/jumpbox/file",
"vpn_key_filename":"/path/to/vpn/key/file/from/jumpbox",
"vpn_port":"2112",
"client_user":"root",
"server_user":"root",
"vpn_user":"vpnadm",
"jumpbox_user":"jumpboxadm"
},
{"client":"1.4.9.16",
"server":"1.4.9.12",
"client_config":"input_16_12.config",
"key_filename":"/path/to/ssh/key",
"primary_vpn":"2.3.4.31",
"peer_vpn":"2.5.12.112",
"jumpbox":"3.2.1.41",
"jumpbox_key_filename":"/path/to/jumpbox/file",
"vpn_key_filename":"/path/to/vpn/key/file/from/jumpbox",
"vpn_port":"2110",
"client_user":"root",
"server_user":"root",
"vpn_user":"vpnadm",
"jumpbox_user":"jumpboxadm"
}
]

The primary_vpn and the peer_vpn fields specify the IP addresses of the primary and
peer vpn gateways of the connection to be used.
The jumpbox field specifies the ip address of the jumpbox used to connect to the vpn
gateways.
The 'jumpbox_key_filename' specifies the key file used to connect to the jumpbox.
the 'vpn_key_filename' specifies the key file used to connect to the primary and peer
vpn gateways from the jumpbox.
The 'vpn_port' is the special port number used to connect to the vpn gateways from the
jumpbox.
The client_user and the server_user specify the user ids used to connect to the client 
and server respectively.
The vpn_user is the user id used to connect to the vpn gateway from the jumpbox.
The jumpbox_user is the user id used to connect to the jumpbox.
Each such combination of configuration values can be specified for every pair of client
server combinations being exercised.

v0.21:
run_np_vpnaas.py now allows defining the key filename containing the ssh key. The config
file now looks like this:

[
{"client":"1.4.9.26",
"server":"1.4.9.25",
"client_config":"input_26_25.config",
"key_filename":"/path/to/ssh/key"
},
{"client":"1.4.9.16",
"server":"1.4.9.12",
"client_config":"input_16_12.config",
"key_filename":"/path/to/ssh/key"
}
]

If the configuration is specified on the command line, then an additional input on the 
ssh key filename has to be provided. 

v0.2:
The input to the run_ng_vpnaas.py script now has a modified config file which looks like:
[
{"client":"1.4.9.26",
"server":"1.4.9.25",
"client_config":"input_26_25.config"
},
{"client":"1.4.9.16",
"server":"1.4.9.12",
"client_config":"input_16_12.config"
}
]

The revised format now allows the script to allow each client server pair to run independently.
The associated configuration file for the client server pair must be available on the client 
alongwith the iperf3_test.py in the home folder of the root user, in order to be executed.

Further, the revised script now generates files of the following format:
On the client:
server_1.25.18.4_run_23-12-2019_03-35-38.tar.gz
1.4.9.16_1.4.9.12_iperf3_test_client_23-12-2019_03-35-32.out
1.4.9.16_vmstat_23-12-2019_03-35-32.out
1.4.9.16_vmstat_23-12-2019_03-35-32.out
where 1.25.18.4 in the first file is the internal IP address of the server side of the first
connection. The tarball contains the run results.
Similarly on the server:
1.4.9.25_iperf3_server_22-12-2019_13-19-13.out
1.4.9.25_vmstat_22-12-2019_13-24-56.out
1.4.9.25_mpstat_22-12-2019_13-24-56.out

Additionally, custom reports from the VPN gateways can also be obtained for vmstat and mpstat
using the following script (in <<>>):
<<
import datetime
import os

if __name__ == "__main__":
                current_time = datetime.datetime.utcnow().strftime("%d-%m-%Y_%H:%M:%S");
                mpstat_file = current_time + "_mpstat.out";
                vmstat_file = current_time + "_vmstat.out";

                mpstat_command = "nohup mpstat -P ALL 2 > " + mpstat_file + " 2>&1 &";
                os.system(mpstat_command);
                vmstat_command = "nohup vmstat -t 2 > " + vmstat_file + " 2>&1 &";
                os.system(vmstat_command);
>>

v0.1:
This script allows specifying one or more pairs of client and server ips, either in a config file, 
e.g. 
[
{"client":"1.42.92.106",
"server":"1.42.92.122"}
]

or as a sequence of client and server ips as input to the script when prompted.
`
Start vmstat and mpstat manually on the VPN Gateways. 
For the first option, the configuration file may be named as cli_serv.config, and the script called as,
# python3 run_ng_vpnaas.py cli_serv.config

Run this script which starts mpstat and vmstat on the client and the server, and subsequently starts iperf3 in server
mode on the server IP. Subsequently, it starts iperf3_test.py on the client.

Once iperf3_test.py completes, the vmstat and mpstat monitors on the client and server need to be manually stopped.
Similarly, they need to be stopped on the VPN gateways as well.

Each monitor (mpstat/ vmstat) file is named with ip address, date stamp, e.g.
1.42.92.122_mpstat_07-12-2019_19:58:09.out

The intent of this script is to simplify starting monitors and also triggering iperf3_test.py remotely.

Dependencies:
============
1. the vmstat and  mpstat monitors need to be manually started on both the VPN Gateways.
2. the iperf3_test.py should already be copied and available in the root folder of the client system.
3. iperf3 should be installed on the server.
4. sysstat should be installed on the server and client for mpstat and vmstat to work.

Next:
=====
1. Add option to specify the ssh key path.
2. Add method to capture the results file from the client and server automatically to the trigger location.
